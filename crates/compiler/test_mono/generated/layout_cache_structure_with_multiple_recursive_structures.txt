procedure List.18 (List.165, List.166, List.167):
    let List.635 : U64 = 0i64;
    let List.636 : U64 = CallByName List.6 List.165;
    let List.634 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.94 List.165 List.166 List.167 List.635 List.636;
    ret List.634;

procedure List.6 (#Attr.2):
    let List.645 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.645;

procedure List.66 (#Attr.2, #Attr.3):
    let List.644 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.644;

procedure List.94 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.637 List.168 List.169 List.170 List.171 List.172:
        let List.639 : Int1 = CallByName Num.22 List.171 List.172;
        if List.639 then
            let List.643 : [<rnu>C *self, <null>] = CallByName List.66 List.168 List.171;
            inc List.643;
            let List.173 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.169 List.643;
            let List.642 : U64 = 1i64;
            let List.641 : U64 = CallByName Num.51 List.171 List.642;
            jump List.637 List.168 List.173 List.170 List.641 List.172;
        else
            dec List.168;
            ret List.169;
    in
    inc #Derived_gen.0;
    jump List.637 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    dec Test.8;
    ret Test.9;
