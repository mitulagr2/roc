procedure List.3 (List.121, List.122, List.123):
    let List.635 : {List I64, I64} = CallByName List.64 List.121 List.122 List.123;
    let List.634 : List I64 = StructAtIndex 0 List.635;
    ret List.634;

procedure List.6 (#Attr.2):
    let List.641 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.641;

procedure List.64 (List.118, List.119, List.120):
    let List.640 : U64 = CallByName List.6 List.118;
    let List.637 : Int1 = CallByName Num.22 List.119 List.640;
    if List.637 then
        let List.638 : {List I64, I64} = CallByName List.67 List.118 List.119 List.120;
        ret List.638;
    else
        let List.636 : {List I64, I64} = Struct {List.118, List.120};
        ret List.636;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.639 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.639;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.279 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
