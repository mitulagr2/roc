procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.109 (List.548, List.549, List.550):
    let List.652 : U64 = 0i64;
    let List.653 : U64 = CallByName List.6 List.548;
    let List.651 : [C U64, C U64] = CallByName List.80 List.548 List.549 List.550 List.652 List.653;
    ret List.651;

procedure List.26 (List.206, List.207, List.208):
    let List.645 : [C U64, C U64] = CallByName List.109 List.206 List.207 List.208;
    let List.648 : U8 = 1i64;
    let List.649 : U8 = GetTagId List.645;
    let List.650 : Int1 = lowlevel Eq List.648 List.649;
    if List.650 then
        let List.209 : U64 = UnionAtIndex (Id 1) (Index 0) List.645;
        ret List.209;
    else
        let List.210 : U64 = UnionAtIndex (Id 0) (Index 0) List.645;
        ret List.210;

procedure List.38 (List.404, List.405):
    let List.644 : U64 = CallByName List.6 List.404;
    let List.406 : U64 = CallByName Num.77 List.644 List.405;
    let List.634 : List U8 = CallByName List.43 List.404 List.406;
    ret List.634;

procedure List.43 (List.402, List.403):
    let List.642 : U64 = CallByName List.6 List.402;
    let List.641 : U64 = CallByName Num.77 List.642 List.403;
    let List.636 : {U64, U64} = Struct {List.403, List.641};
    let List.635 : List U8 = CallByName List.49 List.402 List.636;
    ret List.635;

procedure List.49 (List.480, List.481):
    let List.638 : U64 = StructAtIndex 1 List.481;
    let List.639 : U64 = StructAtIndex 0 List.481;
    let List.637 : List U8 = CallByName List.72 List.480 List.638 List.639;
    ret List.637;

procedure List.6 (#Attr.2):
    let List.643 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.643;

procedure List.66 (#Attr.2, #Attr.3):
    let List.666 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.666;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.640 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.640;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.654 List.551 List.552 List.553 List.554 List.555:
        let List.656 : Int1 = CallByName Num.22 List.554 List.555;
        if List.656 then
            let List.665 : U8 = CallByName List.66 List.551 List.554;
            let List.657 : [C U64, C U64] = CallByName Test.3 List.552 List.665;
            let List.662 : U8 = 1i64;
            let List.663 : U8 = GetTagId List.657;
            let List.664 : Int1 = lowlevel Eq List.662 List.663;
            if List.664 then
                let List.556 : U64 = UnionAtIndex (Id 1) (Index 0) List.657;
                let List.660 : U64 = 1i64;
                let List.659 : U64 = CallByName Num.51 List.554 List.660;
                jump List.654 List.551 List.556 List.553 List.659 List.555;
            else
                dec List.551;
                let List.557 : U64 = UnionAtIndex (Id 0) (Index 0) List.657;
                let List.661 : [C U64, C U64] = TagId(0) List.557;
                ret List.661;
        else
            dec List.551;
            let List.655 : [C U64, C U64] = TagId(1) List.552;
            ret List.655;
    in
    inc #Derived_gen.0;
    jump List.654 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.280 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.280;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.11 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
