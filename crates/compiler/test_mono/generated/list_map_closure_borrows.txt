procedure List.18 (List.165, List.166, List.167):
    let List.646 : U64 = 0i64;
    let List.647 : U64 = CallByName List.6 List.165;
    let List.645 : List Str = CallByName List.94 List.165 List.166 List.167 List.646 List.647;
    ret List.645;

procedure List.2 (List.113, List.114):
    let List.640 : U64 = CallByName List.6 List.113;
    let List.636 : Int1 = CallByName Num.22 List.114 List.640;
    if List.636 then
        let List.638 : Str = CallByName List.66 List.113 List.114;
        inc List.638;
        let List.637 : [C {}, C Str] = TagId(1) List.638;
        ret List.637;
    else
        let List.635 : {} = Struct {};
        let List.634 : [C {}, C Str] = TagId(0) List.635;
        ret List.634;

procedure List.277 (List.278, List.279, List.275):
    let List.657 : Str = CallByName Test.3 List.279;
    let List.656 : List Str = CallByName List.71 List.278 List.657;
    ret List.656;

procedure List.5 (List.274, List.275):
    let List.276 : U64 = CallByName List.6 List.274;
    let List.643 : List Str = CallByName List.68 List.276;
    let List.642 : List Str = CallByName List.18 List.274 List.643 List.275;
    ret List.642;

procedure List.6 (#Attr.2):
    let List.641 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.641;

procedure List.66 (#Attr.2, #Attr.3):
    let List.639 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.639;

procedure List.68 (#Attr.2):
    let List.659 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.659;

procedure List.71 (#Attr.2, #Attr.3):
    let List.658 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.658;

procedure List.94 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.648 List.168 List.169 List.170 List.171 List.172:
        let List.650 : Int1 = CallByName Num.22 List.171 List.172;
        if List.650 then
            let List.654 : Str = CallByName List.66 List.168 List.171;
            inc List.654;
            let List.173 : List Str = CallByName List.277 List.169 List.654 List.170;
            dec List.654;
            let List.653 : U64 = 1i64;
            let List.652 : U64 = CallByName Num.51 List.171 List.653;
            jump List.648 List.168 List.173 List.170 List.652 List.172;
        else
            dec List.168;
            ret List.169;
    in
    inc #Derived_gen.0;
    jump List.648 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Str.16 (#Attr.2, #Attr.3):
    let Str.232 : Str = lowlevel StrRepeat #Attr.2 #Attr.3;
    ret Str.232;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.233 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.233;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : U64 = 2i64;
    let Test.17 : Str = CallByName Str.16 Test.4 Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
