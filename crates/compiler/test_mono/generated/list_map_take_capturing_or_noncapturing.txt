procedure List.18 (List.165, List.166, List.167):
    let List.638 : U64 = 0i64;
    let List.639 : U64 = CallByName List.6 List.165;
    let List.637 : List U8 = CallByName List.94 List.165 List.166 List.167 List.638 List.639;
    ret List.637;

procedure List.277 (List.278, List.279, List.275):
    let List.653 : U8 = GetTagId List.275;
    joinpoint List.654 List.651:
        let List.650 : List U8 = CallByName List.71 List.278 List.651;
        ret List.650;
    in
    switch List.653:
        case 0:
            let List.655 : U8 = CallByName Test.4 List.279 List.275;
            jump List.654 List.655;
    
        case 1:
            let List.655 : U8 = CallByName Test.6 List.279 List.275;
            jump List.654 List.655;
    
        default:
            let List.655 : U8 = CallByName Test.8 List.279;
            jump List.654 List.655;
    

procedure List.5 (List.274, List.275):
    let List.276 : U64 = CallByName List.6 List.274;
    let List.635 : List U8 = CallByName List.68 List.276;
    let List.634 : List U8 = CallByName List.18 List.274 List.635 List.275;
    ret List.634;

procedure List.6 (#Attr.2):
    let List.648 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.648;

procedure List.66 (#Attr.2, #Attr.3):
    let List.647 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.647;

procedure List.68 (#Attr.2):
    let List.656 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.656;

procedure List.71 (#Attr.2, #Attr.3):
    let List.652 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.652;

procedure List.94 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.640 List.168 List.169 List.170 List.171 List.172:
        let List.642 : Int1 = CallByName Num.22 List.171 List.172;
        if List.642 then
            let List.646 : U8 = CallByName List.66 List.168 List.171;
            let List.173 : List U8 = CallByName List.277 List.169 List.646 List.170;
            let List.645 : U64 = 1i64;
            let List.644 : U64 = CallByName Num.51 List.171 List.645;
            jump List.640 List.168 List.173 List.170 List.644 List.172;
        else
            dec List.168;
            ret List.169;
    in
    inc #Derived_gen.3;
    jump List.640 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.281 : U8 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.283 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.282 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.282;

procedure Test.4 (Test.5, #Attr.12):
    let Test.16 : U8 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.15 : U8 = CallByName Num.19 Test.5 Test.16;
    ret Test.15;

procedure Test.6 (Test.7, #Attr.12):
    let Test.19 : U8 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.18 : U8 = CallByName Num.19 Test.7 Test.19;
    ret Test.18;

procedure Test.8 (Test.9):
    let Test.21 : U8 = CallByName Num.19 Test.9 Test.9;
    ret Test.21;

procedure Test.0 ():
    let Test.1 : U8 = 1i64;
    let Test.2 : U8 = 2i64;
    joinpoint Test.13 Test.3:
        let Test.11 : List U8 = Array [1i64, 2i64, 3i64];
        let Test.10 : List U8 = CallByName List.5 Test.11 Test.3;
        dec Test.11;
        ret Test.10;
    in
    let Test.12 : Str = "";
    let Test.24 : Str = "A";
    let Test.25 : Int1 = lowlevel Eq Test.24 Test.12;
    dec Test.24;
    if Test.25 then
        dec Test.12;
        let Test.14 : [C U8, C U8, C ] = TagId(0) Test.1;
        jump Test.13 Test.14;
    else
        let Test.22 : Str = "B";
        let Test.23 : Int1 = lowlevel Eq Test.22 Test.12;
        dec Test.22;
        dec Test.12;
        if Test.23 then
            let Test.17 : [C U8, C U8, C ] = TagId(1) Test.2;
            jump Test.13 Test.17;
        else
            let Test.20 : [C U8, C U8, C ] = TagId(2) ;
            jump Test.13 Test.20;
