procedure List.2 (List.113, List.114):
    let List.656 : U64 = CallByName List.6 List.113;
    let List.653 : Int1 = CallByName Num.22 List.114 List.656;
    if List.653 then
        let List.655 : I64 = CallByName List.66 List.113 List.114;
        let List.654 : [C {}, C I64] = TagId(1) List.655;
        ret List.654;
    else
        let List.652 : {} = Struct {};
        let List.651 : [C {}, C I64] = TagId(0) List.652;
        ret List.651;

procedure List.3 (List.121, List.122, List.123):
    let List.643 : {List I64, I64} = CallByName List.64 List.121 List.122 List.123;
    let List.642 : List I64 = StructAtIndex 0 List.643;
    ret List.642;

procedure List.6 (#Attr.2):
    let List.641 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.641;

procedure List.64 (List.118, List.119, List.120):
    let List.640 : U64 = CallByName List.6 List.118;
    let List.637 : Int1 = CallByName Num.22 List.119 List.640;
    if List.637 then
        let List.638 : {List I64, I64} = CallByName List.67 List.118 List.119 List.120;
        ret List.638;
    else
        let List.636 : {List I64, I64} = Struct {List.118, List.120};
        ret List.636;

procedure List.66 (#Attr.2, #Attr.3):
    let List.649 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.649;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.639 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.639;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.281 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.281;

procedure Test.1 (Test.2):
    let Test.28 : U64 = 0i64;
    let Test.26 : [C {}, C I64] = CallByName List.2 Test.2 Test.28;
    let Test.27 : U64 = 0i64;
    let Test.25 : [C {}, C I64] = CallByName List.2 Test.2 Test.27;
    let Test.8 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.25, Test.26};
    joinpoint Test.22:
        let Test.13 : List I64 = Array [];
        ret Test.13;
    in
    let Test.19 : [C {}, C I64] = StructAtIndex 1 Test.8;
    let Test.20 : U8 = 1i64;
    let Test.21 : U8 = GetTagId Test.19;
    let Test.24 : Int1 = lowlevel Eq Test.20 Test.21;
    if Test.24 then
        let Test.16 : [C {}, C I64] = StructAtIndex 0 Test.8;
        let Test.17 : U8 = 1i64;
        let Test.18 : U8 = GetTagId Test.16;
        let Test.23 : Int1 = lowlevel Eq Test.17 Test.18;
        if Test.23 then
            let Test.15 : [C {}, C I64] = StructAtIndex 0 Test.8;
            let Test.4 : I64 = UnionAtIndex (Id 1) (Index 0) Test.15;
            let Test.14 : [C {}, C I64] = StructAtIndex 1 Test.8;
            let Test.5 : I64 = UnionAtIndex (Id 1) (Index 0) Test.14;
            let Test.12 : U64 = 0i64;
            let Test.10 : List I64 = CallByName List.3 Test.2 Test.12 Test.5;
            let Test.11 : U64 = 0i64;
            let Test.9 : List I64 = CallByName List.3 Test.10 Test.11 Test.4;
            ret Test.9;
        else
            dec Test.2;
            jump Test.22;
    else
        dec Test.2;
        jump Test.22;

procedure Test.0 ():
    let Test.7 : List I64 = Array [1i64, 2i64];
    let Test.6 : List I64 = CallByName Test.1 Test.7;
    ret Test.6;
