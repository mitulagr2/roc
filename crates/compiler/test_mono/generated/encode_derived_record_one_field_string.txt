procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Test.19 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Test.21 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName Test.67 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Test.56 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : Str = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.18 (List.165, List.166, List.167):
    let List.635 : U64 = 0i64;
    let List.636 : U64 = CallByName List.6 List.165;
    let List.634 : List U8 = CallByName List.94 List.165 List.166 List.167 List.635 List.636;
    ret List.634;

procedure List.4 (List.129, List.130):
    let List.656 : U64 = 1i64;
    let List.655 : List U8 = CallByName List.70 List.129 List.656;
    let List.654 : List U8 = CallByName List.71 List.655 List.130;
    ret List.654;

procedure List.6 (#Attr.2):
    let List.659 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.659;

procedure List.66 (#Attr.2, #Attr.3):
    let List.644 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.644;

procedure List.70 (#Attr.2, #Attr.3):
    let List.650 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.650;

procedure List.71 (#Attr.2, #Attr.3):
    let List.648 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.648;

procedure List.8 (#Attr.2, #Attr.3):
    let List.658 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.658;

procedure List.94 (#Derived_gen.16, #Derived_gen.17, #Derived_gen.18, #Derived_gen.19, #Derived_gen.20):
    joinpoint List.637 List.168 List.169 List.170 List.171 List.172:
        let List.639 : Int1 = CallByName Num.22 List.171 List.172;
        if List.639 then
            let List.643 : {Str, Str} = CallByName List.66 List.168 List.171;
            inc List.643;
            let List.173 : List U8 = CallByName Test.70 List.169 List.643;
            let List.642 : U64 = 1i64;
            let List.641 : U64 = CallByName Num.51 List.171 List.642;
            jump List.637 List.168 List.173 List.170 List.641 List.172;
        else
            dec List.168;
            ret List.169;
    in
    inc #Derived_gen.16;
    jump List.637 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20;

procedure Num.127 (#Attr.2):
    let Num.280 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.280;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.96 (#Attr.2):
    let Num.279 : Str = lowlevel NumToStr #Attr.2;
    ret Num.279;

procedure Str.12 (#Attr.2):
    let Str.241 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.241;

procedure Str.36 (#Attr.2):
    let Str.242 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.242;

procedure Str.43 (#Attr.2):
    let Str.239 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.239;

procedure Str.9 (Str.67):
    let Str.68 : {U64, Str, Int1, U8} = CallByName Str.43 Str.67;
    let Str.236 : Int1 = StructAtIndex 2 Str.68;
    if Str.236 then
        let Str.238 : Str = StructAtIndex 1 Str.68;
        let Str.237 : [C {U64, U8}, C Str] = TagId(1) Str.238;
        ret Str.237;
    else
        let Str.234 : U8 = StructAtIndex 3 Str.68;
        let Str.235 : U64 = StructAtIndex 0 Str.68;
        let #Derived_gen.24 : Str = StructAtIndex 1 Str.68;
        dec #Derived_gen.24;
        let Str.233 : {U64, U8} = Struct {Str.235, Str.234};
        let Str.232 : [C {U64, U8}, C Str] = TagId(0) Str.233;
        ret Str.232;

procedure Test.19 (Test.55):
    let Test.291 : Str = CallByName Encode.23 Test.55;
    ret Test.291;

procedure Test.2 ():
    let Test.257 : {} = Struct {};
    ret Test.257;

procedure Test.21 (Test.66):
    let Test.259 : List {Str, Str} = CallByName Encode.23 Test.66;
    ret Test.259;

procedure Test.3 (Test.48, Test.49, Test.50):
    let Test.288 : U8 = CallByName Num.127 Test.49;
    let Test.285 : List U8 = CallByName List.4 Test.48 Test.288;
    let Test.287 : Str = CallByName Num.96 Test.50;
    let Test.286 : List U8 = CallByName Str.12 Test.287;
    let Test.283 : List U8 = CallByName List.8 Test.285 Test.286;
    let Test.284 : U8 = 32i64;
    let Test.282 : List U8 = CallByName List.4 Test.283 Test.284;
    ret Test.282;

procedure Test.56 (Test.57, Test.273, Test.55):
    let Test.280 : I64 = 115i64;
    let Test.281 : U64 = CallByName Str.36 Test.55;
    let Test.278 : List U8 = CallByName Test.3 Test.57 Test.280 Test.281;
    let Test.279 : List U8 = CallByName Str.12 Test.55;
    let Test.276 : List U8 = CallByName List.8 Test.278 Test.279;
    let Test.277 : U8 = 32i64;
    let Test.275 : List U8 = CallByName List.4 Test.276 Test.277;
    ret Test.275;

procedure Test.67 (Test.68, Test.261, Test.66):
    let Test.289 : I64 = 114i64;
    let Test.290 : U64 = CallByName List.6 Test.66;
    let Test.69 : List U8 = CallByName Test.3 Test.68 Test.289 Test.290;
    let Test.264 : {} = Struct {};
    let Test.263 : List U8 = CallByName List.18 Test.66 Test.69 Test.264;
    ret Test.263;

procedure Test.70 (Test.71, Test.265):
    let Test.72 : Str = StructAtIndex 0 Test.265;
    let Test.73 : Str = StructAtIndex 1 Test.265;
    let Test.269 : Str = CallByName Test.19 Test.72;
    let Test.270 : {} = Struct {};
    let Test.267 : List U8 = CallByName Encode.24 Test.71 Test.269 Test.270;
    let Test.268 : {} = Struct {};
    let Test.266 : List U8 = CallByName Encode.24 Test.267 Test.73 Test.268;
    ret Test.266;

procedure Test.0 ():
    let Test.258 : Str = "foo";
    let Test.256 : {} = CallByName Test.2;
    let Test.254 : List U8 = CallByName Encode.26 Test.258 Test.256;
    let Test.209 : [C {U64, U8}, C Str] = CallByName Str.9 Test.254;
    let Test.251 : U8 = 1i64;
    let Test.252 : U8 = GetTagId Test.209;
    let Test.253 : Int1 = lowlevel Eq Test.251 Test.252;
    if Test.253 then
        let Test.210 : Str = UnionAtIndex (Id 1) (Index 0) Test.209;
        ret Test.210;
    else
        dec Test.209;
        let Test.250 : Str = "<bad>";
        ret Test.250;
