procedure List.18 (List.165, List.166, List.167):
    let List.638 : U64 = 0i64;
    let List.639 : U64 = CallByName List.6 List.165;
    let List.637 : List {} = CallByName List.94 List.165 List.166 List.167 List.638 List.639;
    ret List.637;

procedure List.277 (List.278, List.279, List.275):
    let List.651 : {} = CallByName Test.2 List.279;
    let List.650 : List {} = CallByName List.71 List.278 List.651;
    ret List.650;

procedure List.5 (List.274, List.275):
    let List.276 : U64 = CallByName List.6 List.274;
    let List.635 : List {} = CallByName List.68 List.276;
    let List.634 : List {} = CallByName List.18 List.274 List.635 List.275;
    ret List.634;

procedure List.6 (#Attr.2):
    let List.648 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.648;

procedure List.66 (#Attr.2, #Attr.3):
    let List.647 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.647;

procedure List.68 (#Attr.2):
    let List.653 : List {} = lowlevel ListWithCapacity #Attr.2;
    ret List.653;

procedure List.71 (#Attr.2, #Attr.3):
    let List.652 : List {} = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.652;

procedure List.94 (#Derived_gen.3, #Derived_gen.4, #Derived_gen.5, #Derived_gen.6, #Derived_gen.7):
    joinpoint List.640 List.168 List.169 List.170 List.171 List.172:
        let List.642 : Int1 = CallByName Num.22 List.171 List.172;
        if List.642 then
            let List.646 : [] = CallByName List.66 List.168 List.171;
            let List.173 : List {} = CallByName List.277 List.169 List.646 List.170;
            let List.645 : U64 = 1i64;
            let List.644 : U64 = CallByName Num.51 List.171 List.645;
            jump List.640 List.168 List.173 List.170 List.644 List.172;
        else
            dec List.168;
            ret List.169;
    in
    inc #Derived_gen.3;
    jump List.640 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Test.2 (Test.3):
    let Test.7 : {} = Struct {};
    let Test.8 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Test.8

procedure Test.0 ():
    let Test.1 : List [] = Array [];
    let Test.5 : {} = Struct {};
    let Test.4 : List {} = CallByName List.5 Test.1 Test.5;
    dec Test.1;
    ret Test.4;
